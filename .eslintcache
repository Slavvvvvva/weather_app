[{"F:\\weather_app\\src\\index.js":"1","F:\\weather_app\\src\\reportWebVitals.js":"2","F:\\weather_app\\src\\App.js":"3","F:\\weather_app\\src\\components\\Header\\header.js":"4","F:\\weather_app\\src\\components\\Redux\\global-settings-reduser.js":"5","F:\\weather_app\\src\\components\\Redux\\store.js":"6","F:\\weather_app\\src\\components\\YourPlace\\your-place.js":"7","F:\\weather_app\\src\\components\\YourPlace\\CityCard\\city-card.js":"8","F:\\weather_app\\src\\components\\Redux\\weather-reduser.js":"9","F:\\weather_app\\src\\components\\API\\weather-api.js":"10","F:\\weather_app\\src\\components\\DetailWeather\\detail-weather.js":"11","F:\\weather_app\\src\\components\\DetailWeather\\DatailWeatherItem\\detail-weather-item.js":"12","F:\\weather_app\\src\\components\\Util\\form.js":"13","F:\\weather_app\\src\\components\\YourPlace\\LocationCard\\location-card.js":"14","F:\\weather_app\\src\\components\\Util\\Button\\Button.js":"15"},{"size":418,"mtime":1610990621681,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":499162500000,"results":"18","hashOfConfig":"17"},{"size":1373,"mtime":1616341144065,"results":"19","hashOfConfig":"17"},{"size":2985,"mtime":1618929316298,"results":"20","hashOfConfig":"17"},{"size":1883,"mtime":1614207426982,"results":"21","hashOfConfig":"17"},{"size":647,"mtime":1613156323035,"results":"22","hashOfConfig":"17"},{"size":4359,"mtime":1616341077756,"results":"23","hashOfConfig":"17"},{"size":3932,"mtime":1616341092083,"results":"24","hashOfConfig":"17"},{"size":7441,"mtime":1616341023317,"results":"25","hashOfConfig":"17"},{"size":855,"mtime":1613996493737,"results":"26","hashOfConfig":"17"},{"size":6948,"mtime":1616341329512,"results":"27","hashOfConfig":"17"},{"size":808,"mtime":1615809575642,"results":"28","hashOfConfig":"17"},{"size":325,"mtime":1613474249133,"results":"29","hashOfConfig":"17"},{"size":4002,"mtime":1616341033546,"results":"30","hashOfConfig":"17"},{"size":1347,"mtime":1619006565082,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"y3nwt8",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"F:\\weather_app\\src\\index.js",[],["66","67"],"F:\\weather_app\\src\\reportWebVitals.js",[],"F:\\weather_app\\src\\App.js",[],"F:\\weather_app\\src\\components\\Header\\header.js",[],"F:\\weather_app\\src\\components\\Redux\\global-settings-reduser.js",[],"F:\\weather_app\\src\\components\\Redux\\store.js",[],"F:\\weather_app\\src\\components\\YourPlace\\your-place.js",["68","69","70","71"],"import React, { useEffect } from 'react'\r\nimport { reduxForm, Field } from 'redux-form'\r\nimport { compose } from 'redux'\r\nimport y from './y.module.scss'\r\nimport classNames from 'classnames/bind'\r\nimport { connect } from 'react-redux'\r\nimport { getCurrentWeatherIdTC, getCurrentWeatherTC,getPositionWeatherTC,getPositionTC } from '../Redux/weather-reduser'\r\nimport {setModeAC} from '../Redux/global-settings-reduser'\r\nimport CityCard from './CityCard/city-card'\r\nimport LocationCard from './LocationCard/location-card'\r\nimport store from 'store'\r\nimport { Input } from '../Util/form'\r\n\r\n\r\n\r\nconst YourPlace = (props) => {\r\n    let mode = store.get('darckMode')\r\n    let lang = store.get('appLanguage')\r\n    useEffect(() => {\r\n        props.setModeAC(mode, lang)\r\n        let citymass = store.get('city')\r\n        if (citymass && (props.CurrentWeather.length == 0)) {  \r\n            citymass.forEach((i) => {\r\n                props.getCurrentWeatherIdTC(i,lang)\r\n            })\r\n        }\r\n    }, [mode,lang])\r\n\r\n    let {long,lat} = props.position\r\n    useEffect(() => {\r\n        if (props.position){\r\n            props.getPositionWeatherTC(lat,long,lang)\r\n        }\r\n    }, [lat,long,lang])\r\n\r\n    let position = store.get('position')\r\n    useEffect(()=>{\r\n        if(position){\r\n            props.getPositionTC()\r\n        }\r\n    },[position])\r\n\r\n    let cx = classNames.bind(y);\r\n    const className = cx({\r\n        add_card: true,\r\n        add_card_dark: props.darckMode\r\n    })\r\n\r\n    const AddNewCity= (formData) => {\r\n        props.getCurrentWeatherTC(formData.cityName, props.appLanguage)\r\n    }\r\n\r\n    const ShowCityCard = props.CurrentWeather.map((item, i) => {\r\n        return (\r\n            <CityCard city={item.massege} CurrentWeather={props.CurrentWeather[i]} key={`${i}gjkfjgk`} />\r\n        )\r\n    })\r\n\r\n    const find = () => {\r\n        props.getPositionTC()\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            {props.CurrentWeather && ShowCityCard}\r\n            {props.positionWeather && <LocationCard \r\n                                        PositionWeather={props.positionWeather}\r\n                                        day = {`${(props.appLanguage ==='ru')?\r\n                                        new Date(props.position.timestamp).toLocaleString('ru', {weekday: 'short', hour: 'numeric', minute: 'numeric'})\r\n                                        : new Date(props.position.timestamp).toLocaleString('en', {weekday: 'short', hour: 'numeric',hour12: false, minute: 'numeric'})}`}/>\r\n            }\r\n            <div className={className}>\r\n                <AddCityCardReduxForm onSubmit={AddNewCity} {...props}/>\r\n                <div className = {y.location}>\r\n                    <button className = {y.location_button}  onClick ={find} />  \r\n                    {(props.appLanguage === 'ru')? <p>добавить/обновить <br/> погоду по локации </p>:<p>add/update your  <br/> location weather </p>}\r\n                </div>\r\n            </div>\r\n        </>\r\n\r\n    )\r\n}           \r\n\r\nlet notAmptyRU = (value) => {\r\n    if (value) return undefined\r\n    return (\r\n        <p className = {y.valdation}>ты не можешь отправить пустое поле</p>\r\n    )\r\n}\r\nlet notAmptyENG = (value) => {\r\n    if (value) return undefined\r\n    return (\r\n        <p className = {y.valdation}>you can't send an empty field</p>\r\n    )\r\n}\r\n\r\nconst AddCityCardForm = (props) => {\r\n    return (\r\n        <form className={y.form} onSubmit={props.handleSubmit} >\r\n            <Field placeholder={`${(props.appLanguage ==='ru')? 'ГОРОД':'ADD CITY'}`} name={'cityName'} component={Input} className={y.input} validate = {(props.appLanguage ==='ru')?[notAmptyRU]:[notAmptyENG]}></Field>\r\n            <button></button>\r\n        </form>\r\n    )\r\n}\r\nconst AddCityCardReduxForm = reduxForm({ form:'AddCity' })(AddCityCardForm)\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        darckMode: state.GlobalSettings.darkMode,\r\n        CurrentWeather: state.Weather.CurrentWeather,\r\n        appLanguage: state.GlobalSettings.appLanguage,\r\n        position: state.Weather.yourPosition,\r\n        positionWeather:state.Weather.yourPositionWeather\r\n    }\r\n}\r\nexport default compose(\r\n    connect(mapStateToProps, { getCurrentWeatherIdTC, getCurrentWeatherTC,getPositionWeatherTC,getPositionTC, setModeAC })\r\n)(YourPlace)","F:\\weather_app\\src\\components\\YourPlace\\CityCard\\city-card.js",[],"F:\\weather_app\\src\\components\\Redux\\weather-reduser.js",[],"F:\\weather_app\\src\\components\\API\\weather-api.js",[],["72","73"],"F:\\weather_app\\src\\components\\DetailWeather\\detail-weather.js",["74"],"import React, { useEffect } from 'react'\r\nimport { compose } from 'redux'\r\nimport store from 'store'\r\nimport d from './d.module.scss'\r\nimport classNames from 'classnames/bind'\r\nimport { connect } from 'react-redux'\r\nimport { NavLink, withRouter } from 'react-router-dom'\r\nimport { getCNTDaysWeatherTC, getCurrentWeatherIdTC } from '../Redux/weather-reduser'\r\nimport {TogleDetailWeatherAC, setModeAC } from '../Redux/global-settings-reduser'\r\nimport DatailItem from './DatailWeatherItem/detail-weather-item'\r\nimport d01 from '../IMG/openweathermap/01d.svg'\r\nimport n01 from '../IMG/openweathermap/01n.svg'\r\nimport d02 from '../IMG/openweathermap/02d.svg'\r\nimport n02 from '../IMG/openweathermap/02n.svg'\r\nimport d03 from '../IMG/openweathermap/03d.svg'\r\nimport n03 from '../IMG/openweathermap/03n.svg'\r\nimport d04 from '../IMG/openweathermap/04d.svg'\r\nimport n04 from '../IMG/openweathermap/04n.svg'\r\nimport d09 from '../IMG/openweathermap/09d.svg'\r\nimport n09 from '../IMG/openweathermap/09n.svg'\r\nimport d10 from '../IMG/openweathermap/10d.svg'\r\nimport n10 from '../IMG/openweathermap/10n.svg'\r\nimport d11 from '../IMG/openweathermap/11d.svg'\r\nimport n11 from '../IMG/openweathermap/11n.svg'\r\nimport d13 from '../IMG/openweathermap/13d.svg'\r\nimport n13 from '../IMG/openweathermap/13n.svg'\r\nimport d50 from '../IMG/openweathermap/50d.svg'\r\nimport n50 from '../IMG/openweathermap/50n.svg'\r\nimport sunrice from '../IMG/openweathermap/sunrise.svg'\r\nimport sunset from '../IMG/openweathermap/sunset.svg'\r\n\r\n\r\nconst DatailWeathear = (props) => {\r\n\r\n    let lon = props.match.params.sityId.slice(0, props.match.params.sityId.indexOf('_'))\r\n    let lat = props.match.params.sityId.slice(props.match.params.sityId.indexOf('_') + 1) \r\n    let mode = store.get('darckMode')\r\n    let lang = store.get('appLanguage')\r\n\r\n    useEffect(() => {\r\n        props.setModeAC(mode, lang)\r\n        props.getCNTDaysWeatherTC(lat, lon, lang) \r\n    }, [lon, lat, mode, props.appLanguage])\r\n\r\n    const iconSelector = (patch) => {\r\n        switch (patch) {\r\n            case '01d': return d01\r\n            case '01n': return n01\r\n            case '02d': return d02\r\n            case '02n': return n02\r\n            case '03d': return d03\r\n            case '03n': return n03\r\n            case '04d': return d04\r\n            case '04n': return n04\r\n            case '09d': return d09\r\n            case '09n': return n09\r\n            case '10d': return d10\r\n            case '10n': return n10\r\n            case '11d': return d11\r\n            case '11n': return n11\r\n            case '13d': return d13\r\n            case '13n': return n13\r\n            case '50d': return d50\r\n            case '50n': return n50\r\n            default: return d01\r\n        }\r\n    }\r\n    \r\n\r\n    let cx = classNames.bind(d);\r\n    const className = cx({\r\n        current: true,\r\n        current_dark: props.darckMode,\r\n    })\r\n    const classNameDet = cx({\r\n        datail: true,\r\n        datail_dark: props.darckMode,\r\n    })\r\n    \r\n    const classNameBack = cx({\r\n        back_white: true,\r\n        back_darck: props.darckMode\r\n    })\r\n\r\n    if (props.CNTDaysWeather.length ===0) {\r\n        return (\r\n            <p>Loading</p>\r\n        )\r\n    }\r\n\r\n    const ShowDatailItaemDaily = props.CNTDaysWeather.daily.map((item, i) => {\r\n        return (\r\n            <DatailItem \r\n             day ={`${(props.appLanguage ==='ru')?\r\n             new Date(item.dt*1000).toLocaleString('ru', {weekday: 'short'})\r\n             : new Date(item.dt*1000).toDateString().slice( 0 ,3)}`}\r\n             icon={iconSelector(item.weather[0].icon)}\r\n             daytemp={item.temp.day}\r\n             pop= {item.pop}\r\n             descriptions={item.weather[0].description} key={`${i}gjk`} />\r\n        )\r\n    })\r\n    const ShowDatailItaemHourly = props.CNTDaysWeather.hourly.map((item, i) => {\r\n        return (\r\n            <DatailItem \r\n            day ={`${(props.appLanguage ==='ru')?\r\n             new Date(item.dt*1000).toLocaleString('ru', {weekday: 'short', hour: 'numeric', minute: 'numeric'})\r\n             : new Date(item.dt*1000).toLocaleString('en', {weekday: 'short', hour: 'numeric',hour12: false, minute: 'numeric'})}`}\r\n            icon={iconSelector(item.weather[0].icon)}\r\n            daytemp={item.temp}\r\n            descriptions={item.weather[0].description}\r\n            pop= {item.pop}\r\n            hourly ={props.dispayMode} key={`${i}gjk`}\r\n            hourlyItem ={true} />\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className={d.datail_wrapper} >\r\n            <div className={className}>\r\n                <div>\r\n                    <img src={iconSelector(props.CNTDaysWeather.current.weather[0].icon)} alt='weather logo' />\r\n                    <div>\r\n                        <p className={d.temp}> {Math.round(props.CNTDaysWeather.current.temp)}&#176; </p>\r\n                        <p className = {d.fills}>feels like {Math.round(props.CNTDaysWeather.current.feels_like)}&#176;</p>\r\n                        <p className={d.des}> {props.CNTDaysWeather.current.weather[0].description} </p>\r\n                    </div>\r\n                </div>\r\n                <div className={d.city_name}>\r\n                    <p>{props.activCity}</p>\r\n                    <div className ={d.sunrice}>\r\n                    <img src={sunrice} alt=\"sunrice\"/>\r\n                    <p>{new Date(props.CNTDaysWeather.current.sunrise*1000).toLocaleString('ru', {hour: 'numeric', minute: 'numeric'})} </p>\r\n                    <img src={sunset} alt=\"sunset\"/>\r\n                    <p>{new Date(props.CNTDaysWeather.current.sunset*1000).toLocaleString('ru', {hour: 'numeric', minute: 'numeric'})} </p>\r\n                </div>\r\n                </div>\r\n                {/* <div className={d.chainge_mode}>\r\n                    <p>{`${(props.appLanguage === 'ru')? 'По дням':'Daily' }`}</p>\r\n                    <div className={classNameB} onClick={ChaingeMode}></div>\r\n                    <p>{`${(props.appLanguage === 'ru')? 'По часам':'Hourly' }`}</p>\r\n                </div> */}\r\n                <NavLink to='/' className={classNameBack}/>\r\n            </div>\r\n            {<div className={classNameDet}>\r\n                <div className ={d.item_wrapper}>\r\n                    {ShowDatailItaemDaily}\r\n                </div>\r\n                <div className ={d.item_wrapper}>\r\n                    {ShowDatailItaemHourly}\r\n                </div>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n\r\n    return {\r\n        darckMode: state.GlobalSettings.darkMode,\r\n        appLanguage: state.GlobalSettings.appLanguage,\r\n        activCity: state.GlobalSettings.activeCityName,\r\n        dispayMode: state.GlobalSettings.dailyHourly,\r\n        CNTDaysWeather: state.Weather.CNTdaysWeather\r\n    }\r\n}\r\nexport default compose(\r\n    connect(mapStateToProps, {TogleDetailWeatherAC, setModeAC, getCNTDaysWeatherTC, getCurrentWeatherIdTC }),\r\n    withRouter\r\n)(DatailWeathear)","F:\\weather_app\\src\\components\\DetailWeather\\DatailWeatherItem\\detail-weather-item.js",[],"F:\\weather_app\\src\\components\\Util\\form.js",[],"F:\\weather_app\\src\\components\\YourPlace\\LocationCard\\location-card.js",[],"F:\\weather_app\\src\\components\\Util\\Button\\Button.js",[],{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":22,"column":54,"nodeType":"81","messageId":"82","endLine":22,"endColumn":56},{"ruleId":"83","severity":1,"message":"84","line":27,"column":8,"nodeType":"85","endLine":27,"endColumn":19,"suggestions":"86"},{"ruleId":"83","severity":1,"message":"84","line":34,"column":8,"nodeType":"85","endLine":34,"endColumn":23,"suggestions":"87"},{"ruleId":"83","severity":1,"message":"84","line":41,"column":7,"nodeType":"85","endLine":41,"endColumn":17,"suggestions":"88"},{"ruleId":"75","replacedBy":"89"},{"ruleId":"77","replacedBy":"90"},{"ruleId":"83","severity":1,"message":"91","line":43,"column":8,"nodeType":"85","endLine":43,"endColumn":43,"suggestions":"92"},"no-native-reassign",["93"],"no-negated-in-lhs",["94"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["95"],["96"],["97"],["93"],["94"],"React Hook useEffect has missing dependencies: 'lang' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["98"],"no-global-assign","no-unsafe-negation",{"desc":"99","fix":"100"},{"desc":"101","fix":"102"},{"desc":"103","fix":"104"},{"desc":"105","fix":"106"},"Update the dependencies array to be: [mode, lang, props]",{"range":"107","text":"108"},"Update the dependencies array to be: [lat, long, lang, props]",{"range":"109","text":"110"},"Update the dependencies array to be: [position, props]",{"range":"111","text":"112"},"Update the dependencies array to be: [lon, lat, mode, props.appLanguage, props, lang]",{"range":"113","text":"114"},[996,1007],"[mode, lang, props]",[1175,1190],"[lat, long, lang, props]",[1333,1343],"[position, props]",[1928,1963],"[lon, lat, mode, props.appLanguage, props, lang]"]